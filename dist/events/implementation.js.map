{"version":3,"sources":["events/implementation.ts"],"names":[],"mappings":";;;;;;AAAA;;GAEG;AACH,IAAO,CAAC,WAAW,QAAQ,CAAC,CAAC;AAC7B,2BAAuC,cAAc,CAAC,CAAA;AACtD;IAAiC,4BAAY;IAE5C,kBAAoB,KAAwB;QAAhC,qBAAgC,GAAhC,eAAgC;QAC3C,iBAAO,CAAC;QADW,UAAK,GAAL,KAAK,CAAmB;QAQpC,oBAAe,GAAG,EAAE,CAAC;IAN7B,CAAC;IAED,sBAAI,0BAAI;aAAR;YACC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACnB,CAAC;;;OAAA;IAID,qBAAE,GAAF,UAAgB,OAA2C;QAA3D,iBAUC;QATA,EAAE,CAAC,CAAC,OAAO,YAAY,QAAQ,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACxD,MAAM,CAAC,IAAI,0BAAa,CAAC,cAAM,OAAA,CAAC,CAAC,MAAM,CAAC,KAAI,CAAC,eAAe,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,OAAO,CAAC,MAAM,EAApB,CAAoB,CAAC,EAAzD,CAAyD,CAAC,CAAC;QAC3F,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,0BAAa,CAAC,cAAM,OAAA,CAAC,CAAC,MAAM,CAAC,KAAI,CAAC,eAAe,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,OAAO,EAAb,CAAa,CAAC,EAAlD,CAAkD,CAAC,CAAC;QACpF,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,MAAM,IAAI,SAAS,CAAC,iCAA+B,OAAO,sCAAmC,CAAC,CAAC;QAChG,CAAC;IACF,CAAC;IAED,yBAAM,GAAN,UAAO,GAAO;QACb,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,CAAC,EAAN,CAAM,CAAC,CAAC;IAC3C,CAAC;IAED,wBAAK,GAAL;QACC,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC3B,CAAC;IACF,eAAC;AAAD,CA/BA,AA+BC,CA/BgC,sBAAS,GA+BzC;AA/BY,gBAAQ,WA+BpB,CAAA","file":"events/implementation.js","sourcesContent":["/**\r\n * Created by Greg on 01/10/2016.\r\n */\r\nimport _ = require('lodash');\r\nimport {ARexEvent, DisposalToken} from './interfaces';\r\nexport class RexEvent<T> extends ARexEvent<T> {\r\n\r\n\tconstructor(private _name : string = \"event\") {\r\n\t\tsuper();\r\n\t}\r\n\r\n\tget name() {\r\n\t\treturn this._name;\r\n\t}\r\n\r\n\tprivate _invocationList = [];\r\n\r\n\ton<S extends T>(handler : ((arg : T) => void) | RexEvent<S>) : DisposalToken {\r\n\t\tif (handler instanceof RexEvent) {\r\n\t\t\tthis._invocationList.push(handler.invoke.bind(handler));\r\n\t\t\treturn new DisposalToken(() => _.remove(this._invocationList, x => x === handler.invoke));\r\n\t\t} else if (_.isFunction(handler)) {\r\n\t\t\tthis._invocationList.push(handler);\r\n\t\t\treturn new DisposalToken(() => _.remove(this._invocationList, x => x === handler));\r\n\t\t} else {\r\n\t\t\tthrow new TypeError(`Failed to resolve overload: ${handler} is not a RexEvent or a function.`);\r\n\t\t}\r\n\t}\r\n\r\n\tinvoke(arg : T) {\r\n\t\tthis._invocationList.forEach(f => f(arg));\r\n\t}\r\n\r\n\tclear() {\r\n\t\tthis._invocationList = [];\r\n\t}\r\n}"],"sourceRoot":"/src"}