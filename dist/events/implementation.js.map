{"version":3,"sources":["events/implementation.ts"],"names":[],"mappings":";AAAA;;GAEG;AACH,IAAO,CAAC,WAAW,QAAQ,CAAC,CAAC;AAC7B,2BAA4B,cAAc,CAAC,CAAA;AAC3C;;;GAGG;AACH;IAEC;;;;OAIG;IACH,kBAAoB,KAAwB;QAAhC,qBAAgC,GAAhC,eAAgC;QAAxB,UAAK,GAAL,KAAK,CAAmB;QAYpC,oBAAe,GAAG,EAAE,CAAC;IAV7B,CAAC;IAMD,sBAAI,0BAAI;QAJR;;;WAGG;aACH;YACC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACnB,CAAC;;;OAAA;IAID;;;;;OAKG;IACH,qBAAE,GAAF,UAAqB,OAAgD;QAArE,iBAWC;QAVA,EAAE,CAAC,CAAC,OAAO,YAAY,QAAQ,CAAC,CAAC,CAAC;YACjC,IAAI,SAAO,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACzC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAO,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,0BAAa,CAAC,cAAM,OAAA,CAAC,CAAC,MAAM,CAAC,KAAI,CAAC,eAAe,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,SAAO,EAAb,CAAa,CAAC,EAAlD,CAAkD,CAAC,CAAC;QACpF,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,0BAAa,CAAC,cAAM,OAAA,CAAC,CAAC,MAAM,CAAC,KAAI,CAAC,eAAe,EAAE,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,OAAO,EAAb,CAAa,CAAC,EAAlD,CAAkD,CAAC,CAAC;QACpF,CAAC;QAAC,IAAI,CAAC,CAAC;YACP,MAAM,IAAI,SAAS,CAAC,iCAA+B,OAAO,sCAAmC,CAAC,CAAC;QAChG,CAAC;IACF,CAAC;IAED;;;OAGG;IACH,uBAAI,GAAJ,UAAK,GAAY;QAChB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,CAAC,EAAN,CAAM,CAAC,CAAC;IAC3C,CAAC;IAED;;OAEG;IACH,wBAAK,GAAL;QACC,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAC3B,CAAC;IAED,2BAAQ,GAAR;QACC,MAAM,CAAC,sBAAoB,IAAI,CAAC,IAAI,MAAG,CAAC;IACzC,CAAC;IACF,eAAC;AAAD,CA1DA,AA0DC,IAAA;AA1DY,gBAAQ,WA0DpB,CAAA","file":"events/implementation.js","sourcesContent":["/**\r\n * Created by Greg on 01/10/2016.\r\n */\r\nimport _ = require('lodash');\r\nimport {DisposalToken} from './interfaces';\r\n/**\r\n * An event primitive used in the rexjs library. Allows the ability to subscribe to notifications.\r\n *\r\n */\r\nexport class RexEvent<TParam> {\r\n\r\n\t/**\r\n\t * Constructs a new instance of the @RexEvent.\r\n\t * @constructor\r\n\t * @param _name A human-readable name for the event. Optional.\r\n\t */\r\n\tconstructor(private _name : string = \"Event\") {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the human-readable name for the event.\r\n\t * @returns {string}\r\n\t */\r\n\tget name() {\r\n\t\treturn this._name;\r\n\t}\r\n\r\n\tprivate _invocationList = [];\r\n\r\n\t/**\r\n\t * Attaches a handler to this event or subscribes to it. When the event will fire it will also fire the handler.\r\n\t * If the handler is a function, it's called, and if it's an event, it's fired.\r\n\t * @param handler The handler, which can be another event or a function.\r\n\t * @returns {DisposalToken} A token that supports a close() method, upon which this subscription is cancelled.\r\n\t */\r\n\ton<S extends TParam>(handler : ((arg : TParam) => void) | RexEvent<S>) : DisposalToken {\r\n\t\tif (handler instanceof RexEvent) {\r\n\t\t\tlet myBound = handler.fire.bind(handler);\r\n\t\t\tthis._invocationList.push(myBound);\r\n\t\t\treturn new DisposalToken(() => _.remove(this._invocationList, x => x === myBound));\r\n\t\t} else if (_.isFunction(handler)) {\r\n\t\t\tthis._invocationList.push(handler);\r\n\t\t\treturn new DisposalToken(() => _.remove(this._invocationList, x => x === handler));\r\n\t\t} else {\r\n\t\t\tthrow new TypeError(`Failed to resolve overload: ${handler} is not a RexEvent or a function.`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Fires the event. This method's visibility is not restricted, but it should be used carefully.\r\n\t * @param arg The argument with which the event is raised.\r\n\t */\r\n\tfire(arg : TParam) {\r\n\t\tthis._invocationList.forEach(f => f(arg));\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the event's subscription list. Use this method carefully.\r\n\t */\r\n\tclear() {\r\n\t\tthis._invocationList = [];\r\n\t}\r\n\r\n\ttoString() {\r\n\t\treturn `[object RexEvent ${this.name}]`;\r\n\t}\r\n}"],"sourceRoot":"/src"}