{"version":3,"sources":["events/interfaces.ts"],"names":[],"mappings":"AAAA;;GAEG;;AASH;;GAEG;AACH;IACC;;;OAGG;IACH,uBAAoB,MAAmB;QAAnB,WAAM,GAAN,MAAM,CAAa;IAEvC,CAAC;IAED;;OAEG;IACH,6BAAK,GAAL;QACC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,MAAM,EAAE,CAAC;YACd,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,CAAC;IACF,CAAC;IACF,oBAAC;AAAD,CAlBA,AAkBC,IAAA;AAlBY,qBAAa,gBAkBzB,CAAA","file":"events/interfaces.js","sourcesContent":["/**\r\n * Created by Greg on 01/10/2016.\r\n */\r\n\r\n/**\r\n * Interface for abstracting over disposal tokens.\r\n */\r\nexport interface IDisposable {\r\n\tclose() : void;\r\n}\r\n\r\n/**\r\n * A special token used for performing deterministic cleanup. Part of rexjs infrastructure.\r\n */\r\nexport class DisposalToken implements IDisposable {\r\n\t/**\r\n\t * Constructs a new `DisposalToken`.\r\n\t * @param _close The action to perform when the token is closed. This function will only be called once.\r\n\t */\r\n\tconstructor(private _close : () => void) {\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs the cleanup specified for the token. Multiple calls to this method do nothing.\r\n\t */\r\n\tclose() {\r\n\t\tif (this._close) {\r\n\t\t\tthis._close();\r\n\t\t\tthis._close = null;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Marker interface for change notification data.\r\n */\r\nexport interface IChangeInfo {\r\n\r\n}"],"sourceRoot":"/src"}