{"version":3,"sources":["binding/base-binding.ts"],"names":[],"mappings":";AAGA,uBAAqB,WAAW,CAAC,CAAA;AAUjC;IA0CC,qBAAY,MAAY,EAAE,QAAsB;QA9BhD;;;;WAIG;QACK,gBAAW,GAAG,KAAK,CAAC;QAE5B;;;;WAIG;QACM,aAAQ,GAAG,KAAK,CAAC;QAmBzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC1B,CAAC;IAMD,sBAAI,sCAAa;QAJjB;;;WAGG;aACH;YACC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC;QACtB,CAAC;;;OAAA;IAES,iCAAW,GAArB,UAAsB,MAAY;QAAlC,iBAeC;QAdA,IAAA,SAA4C,EAAvC,sBAAQ,EAAE,kBAAM,EAAE,gCAAa,CAAS;QAC7C,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACnB,MAAM,eAAM,CAAC,YAAY,EAAE,CAAC;QAC7B,CAAC;QACD,EAAE,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC9B,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;YAClC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAA;QAC7B,CAAC;QACD,6CAA6C;QAC5C,IAAY,CAAC,MAAM,GAAG,MAAM,CAAC;QAE9B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,EAA5B,CAA4B,CAAC,CAAC;QAC5E,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,EAA5B,CAA4B,CAAC,CAAC;IAC7E,CAAC;IAEO,+BAAS,GAAjB,UAAkB,IAAa,EAAE,QAAc;QAC9C,IAAA,SAAiE,EAA5D,4BAAW,EAAE,kBAAM,EAAE,kBAAM,EAAE,gCAAa,EAAE,sBAAQ,CAAS;QAClE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC;QACR,CAAC;QACD,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC;QACR,CAAC;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,QAAQ,CAAC,QAAQ,KAAK,MAAM,GAAG,QAAQ,GAAG,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC/D,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC1B,CAAC;IAID,2BAAK,GAAL;QACC,IAAA,SAAsC,EAAjC,8BAAY,EAAE,8BAAY,CAAQ;QACvC,YAAY,CAAC,KAAK,EAAE,CAAC;QACrB,YAAY,CAAC,KAAK,EAAE,CAAC;QACpB,IAAY,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC/B,CAAC;IACF,kBAAC;AAAD,CA7FA,AA6FC,IAAA;AA7FqB,mBAAW,cA6FhC,CAAA","file":"binding/base-binding.js","sourcesContent":["import {Subscription} from \"../events/subscription\";\r\nimport {RexScalar, ScalarChange} from \"../rexes/scalar/index\";\r\nimport {ReflectHelper} from '../reflection';\r\nimport {Errors} from '../errors';\r\nimport {readonly} from 'core-decorators';\r\nimport {Rex} from \"../rexes/base\";\r\n/**\r\n * Created by Greg on 16/10/2016.\r\n */\r\n\r\n\r\nexport type BindPriority = \"origin\" | \"target\";\r\nexport type ChangeSource = \"origin\" | \"target\";\r\nexport abstract class BaseBinding<TChange, TRex extends Rex<TChange>> {\r\n\r\n\t/**\r\n\t * Subscription to the origin's notifier.\r\n\t * @private\r\n\t */\r\n\tprivate _originToken: Subscription;\r\n\t/**\r\n\t * Subscription to the target's notifier.\r\n\t * @private\r\n\t */\r\n\tprivate _targetToken: Subscription;\r\n\t/**\r\n\t * Whether the binding is currently updating itself. Used to avoid infinite recursion.\r\n\t * @type {boolean}\r\n\t * @private\r\n\t */\r\n\tprivate _isUpdating = false;\r\n\r\n\t/**\r\n\t * Whether the binding has been disposed.\r\n\t * @type {boolean}\r\n\t * @readonly\r\n\t */\r\n\treadonly isClosed = false;\r\n\r\n\t/**\r\n\t * Whether the binding prioritizes the source or the origin.\r\n\t * @readonly\r\n\t */\r\n\treadonly priority: BindPriority;\r\n\t/**\r\n\t * The origin of the binding.\r\n\t * @readonly\r\n\t */\r\n\treadonly origin: TRex;\r\n\t/**\r\n\t * The target of the binding.\r\n\t * @readonly\r\n\t */\r\n\treadonly target: TRex;\r\n\r\n\tconstructor(origin: TRex, priority: BindPriority) {\r\n\t\tthis.origin = origin;\r\n\t\tthis.priority = priority;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the binding has been initialized, i.e. if it has been assigned a target.\r\n\t * @returns {boolean}\r\n\t */\r\n\tget isInitialized() {\r\n\t\treturn !!this.target;\r\n\t}\r\n\r\n\tprotected _initialize(target: TRex) : void {\r\n\t\tlet {priority, origin, isInitialized} = this;\r\n\t\tif (isInitialized) {\r\n\t\t\tthrow Errors.alreadyBound();\r\n\t\t}\r\n\t\tif (priority === \"target\") {\r\n\t\t\tthis._onChange(null, target);\r\n\t\t} else if (priority === \"origin\") {\r\n\t\t\tthis._onChange(null, origin)\r\n\t\t}\r\n\t\t//force-assign to this fake readonly property\r\n\t\t(this as any).target = target;\r\n\r\n\t\tthis._targetToken = target.changed.on(data => this._onChange(data, target));\r\n\t\tthis._originToken = origin.changed.on(data => this._onChange(data, origin));\r\n\t}\r\n\r\n\tprivate _onChange(data: TChange, notifier: TRex) {\r\n\t\tlet {_isUpdating, origin, target, isInitialized, priority} = this;\r\n\t\tif (!isInitialized) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (_isUpdating) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._isUpdating = true;\r\n\t\tthis._rectify(notifier === origin ? \"origin\" : \"target\", data);\r\n\t\tthis._isUpdating = false;\r\n\t}\r\n\r\n\tprotected abstract _rectify(source : ChangeSource, data : TChange);\r\n\r\n\tclose() {\r\n\t\tlet {_targetToken, _originToken}= this;\r\n\t\t_originToken.close();\r\n\t\t_targetToken.close();\r\n\t\t(this as any).isClosed = true;\r\n\t}\r\n}"],"sourceRoot":"/src"}