{"version":3,"sources":["events/subscription.ts"],"names":[],"mappings":"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","file":"events/subscription.js","sourcesContent":["/**\r\n * Created by Greg on 03/10/2016.\r\n */\r\n/**\r\n * Created by Greg on 01/10/2016.\r\n */\r\n\r\nimport _ = require(\"lodash\");\r\nimport {Errors, ClosedError} from '../errors';\r\n/**\r\n * Interface for abstracting over disposal tokens.\r\n */\r\nexport interface ISubscription {\r\n\t/**\r\n\t * Called when the subscription is closed. Will not be called on a closed subscription.\r\n\t */\r\n\tclose() : void;\r\n\t/**\r\n\t * Called to freeze the subscription. While a subscription is frozen, the behavior is activates is disabled.\r\n\t * If called on a frozen subscription, should do nothing.\r\n\t */\r\n\tfreeze() : void;\r\n\t/**\r\n\t * Called to unfreeze the subscription.\r\n\t * If called on an unfrozen subscription, should do nothing.\r\n\t */\r\n\tunfreeze() : void;\r\n}\r\n\r\n/**\r\n * A special token that represents a subscription to a RexEvent and allows certain operations to be performed on the subscription.\r\n */\r\nexport class Subscription implements ISubscription {\r\n\r\n\tprivate _members : ISubscription;\r\n\r\n\t/**\r\n\t * Constructs a new subscription token.\r\n\t * @param members The actions this Subscription supports or just the Close action.\r\n\t */\r\n\tconstructor(members : ISubscription | (() => void)) {\r\n\t\tif (_.isFunction(members)) {\r\n\t\t\tthis._members = {\r\n\t\t\t\tclose : members,\r\n\t\t\t\tfreeze : () => {},\r\n\t\t\t\tunfreeze : () => {}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis._members = members;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Combines this subscription token with others to create a single token that controls them all.\r\n\t * @param otherTokens The other tokens.\r\n\t * @returns {Subscription} A multi-subscription token.\r\n\t */\r\n\tand(...otherTokens : ISubscription[]) : Subscription {\r\n\t\treturn Subscription.all([this, ...otherTokens]);\r\n\t}\r\n\r\n\t/**\r\n\t * Freezes this subscription, executes the action, and unfreezes it.\r\n\t * @param action An action to do while the subscription is frozen.\r\n\t */\r\n\tfreezeWhile(action : () => void) : void {\r\n\t\tif (this._members) {\r\n\t\t\tthis.freeze();\r\n\t\t\taction();\r\n\t\t\tthis.unfreeze();\r\n\t\t} else {\r\n\t\t\taction();\r\n\t\t}\r\n\t}\r\n\r\n\tstatic all(tokens : ISubscription[]) {\r\n\t\tlet arr = tokens.map(x => x instanceof MultiSubscription ? (x as any)._disposalList as ISubscription[] : [x]);\r\n\t\tlet flat = _.flatten(arr);\r\n\t\treturn new MultiSubscription(flat);\r\n\t}\r\n\t/**\r\n\t * Freezes this subscription until it is unfrozen or closed. Does nothing if the subscription is frozen or closed.\r\n\t */\r\n\tfreeze() : void{\r\n\t\tif (this.isClosed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._members.freeze.call(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Unfreezes the subscription if it's frozen. Does nothing if the subscription is not frozen or has been closed.\r\n\t */\r\n\tunfreeze() {\r\n\t\tif (this.isClosed) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis._members.unfreeze.call(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Closes the subscription managed by this token. If called on a closed subscription, does nothing.\r\n\t */\r\n\tclose() {\r\n\t\tif (this._members) {\r\n\t\t\tthis._members.close.call(this);\r\n\t\t\tthis._members = null;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Whether this subscription has been closed.\r\n\t * @returns {boolean}\r\n\t */\r\n\tget isClosed() {\r\n\t\treturn !this._members;\r\n\t}\r\n}\r\n\r\nexport class MultiSubscription extends Subscription {\r\n\tprivate _disposalList : ISubscription[];\r\n\r\n\tconstructor(list : ISubscription[]) {\r\n\t\tlet close = () => list.forEach(x => x.close());\r\n\t\tlet freeze : () => void;\r\n\t\tlet unfreeze : () => void;\r\n\t\tfreeze = () => list.forEach(x => x.freeze());\r\n\t\tunfreeze = () => list.forEach(x => x.unfreeze());\r\n\t\tsuper({\r\n\t\t\tfreeze : freeze,\r\n\t\t\tunfreeze : unfreeze,\r\n\t\t\tclose : close\r\n\t\t});\r\n\t\tthis._disposalList = list;\r\n\t}\r\n\r\n\tclose() {\r\n\t\tsuper.close();\r\n\t\tthis._disposalList = [];\r\n\t}\r\n}"],"sourceRoot":"/src"}